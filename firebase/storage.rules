rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if user is group creator or admin
    function isGroupAdmin(groupId) {
      let conversation = firestore.get(/databases/(default)/documents/conversations/$(groupId)).data;
      return request.auth.uid == conversation.creatorId ||
             (conversation.keys().hasAll(['adminIds']) && request.auth.uid in conversation.adminIds);
    }

    // Profile photos - users can only upload to their own folder
    match /users/{userId}/profile.jpg {
      // Any authenticated user can read profile photos
      allow read: if request.auth != null;

      // Users can only delete their own profile photo
      allow delete: if request.auth != null && request.auth.uid == userId;

      // Users can only write (upload/update) their own profile photo with validation
      allow create, update: if request.auth != null &&
                               request.auth.uid == userId &&
                               // Validate file size (5MB max)
                               request.resource.size < 5 * 1024 * 1024 &&
                               // Validate content type (images only)
                               request.resource.contentType.matches('image/.*');
    }

    // Group photos - TEMPORARY: allow all authenticated users (for debugging)
    match /groups/{groupId}/photo.jpg {
      // Any authenticated user can read group photos
      allow read: if request.auth != null;

      // TEMPORARY: Allow any authenticated user to upload (for debugging)
      allow create, update: if request.auth != null &&
                               // Validate file size (5MB max)
                               request.resource.size < 5 * 1024 * 1024 &&
                               // Validate content type (images only)
                               request.resource.contentType.matches('image/.*');

      // TEMPORARY: Allow any authenticated user to delete (for debugging)
      allow delete: if request.auth != null;
    }

    // Default deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
