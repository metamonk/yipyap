import { Timestamp } from 'firebase/firestore';

/**
 * Username validation regex pattern
 * - Allows lowercase letters, numbers, and underscores
 * - Length must be 3-20 characters
 */
export const USERNAME_REGEX = /^[a-z0-9_]{3,20}$/;

/**
 * Minimum allowed username length
 */
export const MIN_USERNAME_LENGTH = 3;

/**
 * Maximum allowed username length
 */
export const MAX_USERNAME_LENGTH = 20;

/**
 * Maximum allowed display name length
 */
export const MAX_DISPLAY_NAME_LENGTH = 50;

/**
 * Minimum daily capacity (messages per day)
 * @remarks
 * Set to 5 to prevent creators from being too restrictive
 */
export const MIN_CAPACITY = 5;

/**
 * Maximum daily capacity (messages per day)
 * @remarks
 * Set to 20 to prevent creator burnout and maintain quality engagement
 */
export const MAX_CAPACITY = 20;

/**
 * Default daily capacity (messages per day)
 * @remarks
 * Aligned with "Meaningful 10" brand positioning
 * Research shows 10-12 messages is sustainable (~20 minutes/day)
 */
export const DEFAULT_CAPACITY = 10;

/**
 * Minimum boundary message length (characters)
 * @remarks
 * Ensures boundary messages are clear and provide sufficient context
 */
export const MIN_BOUNDARY_MESSAGE_LENGTH = 50;

/**
 * Maximum boundary message length (characters)
 * @remarks
 * Prevents overwhelming fans with overly long messages
 */
export const MAX_BOUNDARY_MESSAGE_LENGTH = 500;

/**
 * Default boundary message template (Story 6.5)
 * @remarks
 * Professional, kind template for capacity boundary messages.
 * Supports template variables: {{creatorName}}, {{faqUrl}}, {{communityUrl}}
 */
export const DEFAULT_BOUNDARY_MESSAGE =
  "Thanks for reaching out! I prioritize deep, meaningful conversations and have reached my capacity for today. " +
  "I'd love to connect when I have the time to give you my full attention. " +
  "In the meantime, check out my FAQ ({{faqUrl}}) or join our community ({{communityUrl}}) for faster responses!";

/**
 * Suggestion priority levels for capacity adjustments
 */
export type SuggestionPriority = 'low' | 'medium' | 'high';

/**
 * Capacity adjustment suggestion (Story 6.5)
 * @remarks
 * Generated by weekly report algorithm based on usage patterns
 */
export interface CapacitySuggestion {
  /** Suggested new daily capacity limit */
  adjustCapacity?: number;

  /** Human-readable explanation for the suggestion */
  reason: string;

  /** Priority level of the suggestion */
  priority: SuggestionPriority;
}

/**
 * Weekly capacity report metrics (Story 6.5)
 * @remarks
 * Aggregated data from the past week of engagement
 */
export interface CapacityMetrics {
  /** Daily capacity setting during the report period */
  capacitySet: number;

  /** Average daily usage (messages handled per day) */
  avgDailyUsage: number;

  /** Usage rate as percentage (avgDailyUsage / capacitySet) */
  usageRate: number;

  /** Total deep conversations this week */
  totalDeep: number;

  /** Total FAQ auto-responses this week */
  totalFAQ: number;

  /** Total auto-archived messages this week */
  totalArchived: number;
}

/**
 * Weekly capacity report document (Story 6.5)
 * @remarks
 * Stored in capacity_reports collection.
 * Generated weekly on Sundays for users with weeklyReportsEnabled=true.
 */
export interface CapacityReport {
  /** Unique report ID */
  id: string;

  /** User ID this report belongs to */
  userId: string;

  /** Start of report period (Sunday 00:00) */
  weekStartDate: Timestamp;

  /** End of report period (Saturday 23:59) */
  weekEndDate: Timestamp;

  /** Aggregated metrics for the week */
  metrics: CapacityMetrics;

  /** AI-generated suggestions for capacity adjustments */
  suggestions: CapacitySuggestion[];

  /** Server timestamp when report was created */
  createdAt: Timestamp;
}

/**
 * User presence status
 */
export type PresenceStatus = 'online' | 'offline';

/**
 * Represents a user's presence information
 * @remarks
 * Presence data will be fully implemented in Epic 3
 */
export interface UserPresence {
  /** Current online status of the user */
  status: PresenceStatus;

  /** Server timestamp of when user was last seen online */
  lastSeen: Timestamp;
}

/**
 * Push token types supported
 */
export type PushTokenType = 'expo' | 'fcm' | 'apns';

/**
 * Push notification token information for a specific device
 * @remarks
 * Supports multiple devices per user for push notifications.
 * Handles both Expo tokens (for Expo Go) and native FCM/APNs tokens (for production builds).
 */
export interface PushToken {
  /** Push notification token for this device */
  token: string;

  /** Token type: expo (Expo Go), fcm (Android native), or apns (iOS native) */
  type: PushTokenType;

  /** Platform type (iOS or Android) */
  platform: 'ios' | 'android';

  /** Unique device identifier */
  deviceId: string;

  /** App version at time of token generation */
  appVersion: string;

  /** Timestamp when token was created */
  createdAt: Timestamp;

  /** Timestamp when token was last used/verified */
  lastUsed: Timestamp;
}

/**
 * @deprecated Use PushToken instead
 * Legacy type for backward compatibility
 */
export type FCMToken = PushToken;

/**
 * Notification preference categories
 * @remarks
 * Allows granular control over notification types
 */
export interface NotificationPreferences {
  /** Master toggle for all notifications */
  enabled: boolean;

  /** Show message preview in notification */
  showPreview: boolean;

  /** Enable notification sounds */
  sound: boolean;

  /** Enable notification vibration */
  vibration: boolean;

  /** Enable notifications for direct messages */
  directMessages: boolean;

  /** Enable notifications for group messages */
  groupMessages: boolean;

  /** Enable notifications for system messages */
  systemMessages: boolean;

  /** Quiet hours start time (24-hour format, e.g., "22:00") */
  quietHoursStart?: string;

  /** Quiet hours end time (24-hour format, e.g., "08:00") */
  quietHoursEnd?: string;
}

/**
 * Presence privacy and behavior preferences
 * @remarks
 * Controls how user's online/offline status is displayed to others
 */
export interface PresencePreferences {
  /** Whether to show online/offline status to others */
  showOnlineStatus: boolean;

  /** Whether to show "last seen" timestamp when offline */
  showLastSeen: boolean;

  /** Idle timeout in minutes before marked as "away" (default: 5) */
  awayTimeoutMinutes: number;

  /** Whether away detection is enabled */
  awayDetectionEnabled: boolean;

  /** Invisible mode - appear offline while still receiving updates */
  invisibleMode: boolean;
}

/**
 * Voice matching settings for AI-generated response suggestions
 *
 * @remarks
 * Controls behavior of voice-matched response generation (Story 5.5).
 * Allows creators to customize suggestion frequency, count, and retraining schedule.
 *
 * @example
 * ```typescript
 * const voiceSettings: VoiceMatchingSettings = {
 *   enabled: true,
 *   autoShowSuggestions: true,
 *   suggestionCount: 2,
 *   retrainingSchedule: 'weekly'
 * };
 * ```
 */
export interface VoiceMatchingSettings {
  /** Whether voice matching is enabled for this user (default: true) */
  enabled: boolean;

  /** Whether to automatically show suggestions when conversation loads (default: true) */
  autoShowSuggestions: boolean;

  /** Number of suggestions to generate per message (1-3, default: 2) */
  suggestionCount: number;

  /** How often to retrain the voice profile (default: 'weekly') */
  retrainingSchedule: 'weekly' | 'biweekly' | 'monthly';
}

/**
 * Capacity management settings for daily response limits (Story 6.3)
 *
 * @remarks
 * Controls how many messages a creator can meaningfully respond to each day.
 * Helps prevent burnout and maintain authentic engagement quality.
 * Default capacity is 10 messages/day, aligned with "Meaningful 10" branding.
 *
 * @example
 * ```typescript
 * const capacitySettings: CapacitySettings = {
 *   dailyLimit: 10,
 *   boundaryMessage: 'Thanks for reaching out! I prioritize deep...',
 *   autoArchiveEnabled: true,
 *   requireEditingForBusiness: true,
 *   weeklyReportsEnabled: false
 * };
 * ```
 */
export interface CapacitySettings {
  /**
   * Maximum number of messages to respond to per day (5-20)
   * @remarks
   * - Minimum: 5 (prevents over-restriction)
   * - Maximum: 20 (prevents burnout)
   * - Default: 10 (brand-aligned)
   */
  dailyLimit: number;

  /**
   * Customizable boundary message template (Story 6.5)
   * @remarks
   * Sent to messages that exceed daily capacity.
   * Default template provided in Story 6.5.
   * Supports template variables: {{creatorName}}, {{faqUrl}}, {{communityUrl}}
   * Length: 50-500 characters
   */
  boundaryMessage: string;

  /**
   * Whether to automatically archive messages beyond capacity (Story 6.4)
   * @remarks
   * When true, messages beyond capacity are archived with boundary message.
   * Default: true
   */
  autoArchiveEnabled: boolean;

  /**
   * Whether business opportunities require manual editing before sending (Story 6.2)
   * @remarks
   * When true, high-value opportunities are shown as drafts requiring review.
   * Default: true
   */
  requireEditingForBusiness: boolean;

  /**
   * Whether weekly capacity reports are enabled (Story 6.5)
   * @remarks
   * When true, user receives weekly summaries and capacity suggestions.
   * Reports sent on Sundays at midnight in user's timezone.
   * Default: false
   */
  weeklyReportsEnabled: boolean;

  /**
   * Timestamp of last weekly report sent (Story 6.5)
   * @remarks
   * Used to prevent duplicate reports. Updated after each report generation.
   * Optional field - undefined if no reports sent yet.
   */
  lastReportSent?: Timestamp;
}

/**
 * User settings and preferences
 * @remarks
 * Additional settings will be added in future epics
 */
export interface UserSettings {
  /** Whether to send read receipts to other users */
  sendReadReceipts: boolean;

  /** Whether push notifications are enabled */
  notificationsEnabled: boolean;

  /** Detailed notification preferences */
  notifications?: NotificationPreferences;

  /** Presence and online status preferences */
  presence?: PresencePreferences;

  /**
   * Voice matching settings for AI response suggestions (Story 5.5)
   * @remarks
   * Controls voice-matched response generation behavior.
   * If not set, defaults to enabled with standard settings.
   */
  voiceMatching?: VoiceMatchingSettings;

  /**
   * Opportunity notification settings (Story 5.6)
   * @remarks
   * Controls when and how the user receives notifications for business opportunities.
   * Allows granular control by opportunity type and score threshold.
   * If not set, defaults to enabled with score threshold of 70.
   */
  opportunityNotifications?: {
    /** Master toggle for opportunity notifications (default: true) */
    enabled: boolean;

    /**
     * Minimum opportunity score to trigger notification (0-100, default: 70)
     * @remarks
     * Only opportunities with score >= this threshold will trigger notifications.
     * Allows users to filter out lower-value opportunities.
     */
    minimumScore: number;

    /**
     * Per-opportunity-type notification toggles
     * @remarks
     * Allows users to receive notifications only for specific opportunity types.
     * All types default to true when not specified.
     */
    notifyByType: {
      /** Notify for sponsorship opportunities (default: true) */
      sponsorship: boolean;

      /** Notify for collaboration opportunities (default: true) */
      collaboration: boolean;

      /** Notify for partnership opportunities (default: true) */
      partnership: boolean;

      /** Notify for sale opportunities (default: false) */
      sale: boolean;
    };

    /**
     * Quiet hours settings for opportunity notifications
     * @remarks
     * Prevents opportunity notifications during specified hours.
     * Useful for creators who want uninterrupted sleep or focus time.
     */
    quietHours?: {
      /** Whether quiet hours are enabled (default: false) */
      enabled: boolean;

      /**
       * Start time in 24-hour format (e.g., "22:00")
       * @remarks
       * Notifications will be suppressed starting at this time
       */
      start: string;

      /**
       * End time in 24-hour format (e.g., "08:00")
       * @remarks
       * Notifications will resume after this time
       */
      end: string;
    };
  };

  /**
   * Capacity management settings (Story 6.3)
   * @remarks
   * Controls daily response limits and boundary message behavior.
   * If not set, defaults to 10 messages/day with standard settings.
   */
  capacity?: CapacitySettings;

  /**
   * User's external links for template variables (Story 6.5)
   * @remarks
   * Used in boundary message templates and other customizable messages.
   * Supports {{faqUrl}} and {{communityUrl}} template variables.
   */
  links?: {
    /** URL to user's FAQ page or document */
    faqUrl?: string;

    /** URL to user's community (Discord, Telegram, etc.) */
    communityUrl?: string;
  };
}

/**
 * Represents a complete user profile in the application
 * @remarks
 * This is the main user document stored in Firestore at /users/{uid}
 * Some fields like fcmToken and presence.lastSeen will be fully utilized in Epic 3
 */
export interface User {
  /** Firebase Auth user ID (same as document ID) */
  uid: string;

  /** Unique username (3-20 chars, lowercase, alphanumeric + underscore) */
  username: string;

  /** User's display name (up to 50 characters) */
  displayName: string;

  /** User's email address from Firebase Auth */
  email: string;

  /** Firebase Storage URL for profile photo (optional) */
  photoURL?: string;

  /** Firebase Cloud Messaging token for push notifications (optional, Epic 3) */
  fcmToken?: string;

  /** Array of push tokens for multiple devices (supports Expo and native tokens) */
  fcmTokens?: PushToken[];

  /** @deprecated Legacy field - use fcmTokens instead */
  pushTokens?: PushToken[];

  /** User's current presence information */
  presence: UserPresence;

  /** User's settings and preferences */
  settings: UserSettings;

  /** Server timestamp when user profile was created */
  createdAt: Timestamp;

  /** Server timestamp when user profile was last updated */
  updatedAt: Timestamp;
}

/**
 * Form data structure for profile creation
 * @remarks
 * Used during username setup after registration
 */
export interface UserProfileFormData {
  /** Username to create (will be validated and lowercased) */
  username: string;

  /** Display name for the user */
  displayName: string;

  /** Optional local URI of profile photo to upload */
  photoUri?: string;
}

/**
 * Form data structure for profile editing
 * @remarks
 * Username is read-only after creation, so not included here
 */
export interface UserProfileEditData {
  /** Updated display name */
  displayName: string;

  /** Optional local URI of new profile photo */
  photoUri?: string;
}

/**
 * Username document stored in /usernames collection
 * @remarks
 * Used to enforce username uniqueness. Document ID is the username itself.
 */
export interface UsernameDocument {
  /** Firebase Auth UID of the user who owns this username */
  uid: string;
}

/**
 * Result of username validation
 */
export interface UsernameValidationResult {
  /** Whether the username format is valid */
  isValid: boolean;

  /** Error message if validation failed */
  error?: string;
}

/**
 * Validates username format according to app rules
 * @param username - The username to validate
 * @returns Validation result with error message if invalid
 * @example
 * ```typescript
 * const result = validateUsername('john_doe');
 * if (!result.isValid) {
 *   console.error(result.error);
 * }
 * ```
 */
export function validateUsername(username: string): UsernameValidationResult {
  const lower = username.toLowerCase();

  if (lower.length < MIN_USERNAME_LENGTH) {
    return {
      isValid: false,
      error: `Username must be at least ${MIN_USERNAME_LENGTH} characters`,
    };
  }

  if (lower.length > MAX_USERNAME_LENGTH) {
    return {
      isValid: false,
      error: `Username must be ${MAX_USERNAME_LENGTH} characters or less`,
    };
  }

  if (!USERNAME_REGEX.test(lower)) {
    return {
      isValid: false,
      error: 'Username can only contain letters, numbers, and underscores',
    };
  }

  return { isValid: true };
}

/**
 * Validates display name format
 * @param displayName - The display name to validate
 * @returns Validation result with error message if invalid
 * @example
 * ```typescript
 * const result = validateDisplayName('John Doe');
 * if (!result.isValid) {
 *   console.error(result.error);
 * }
 * ```
 */
export function validateDisplayName(displayName: string): UsernameValidationResult {
  const trimmed = displayName.trim();

  if (trimmed.length === 0) {
    return {
      isValid: false,
      error: 'Display name is required',
    };
  }

  if (trimmed.length > MAX_DISPLAY_NAME_LENGTH) {
    return {
      isValid: false,
      error: `Display name must be ${MAX_DISPLAY_NAME_LENGTH} characters or less`,
    };
  }

  return { isValid: true };
}

/**
 * Validates daily capacity value
 * @param capacity - The daily capacity to validate (messages per day)
 * @returns Validation result with error message if invalid
 * @example
 * ```typescript
 * const result = validateCapacity(10);
 * if (!result.isValid) {
 *   console.error(result.error);
 * }
 * ```
 */
export function validateCapacity(capacity: number): UsernameValidationResult {
  if (!Number.isInteger(capacity)) {
    return {
      isValid: false,
      error: 'Capacity must be a whole number',
    };
  }

  if (capacity < MIN_CAPACITY) {
    return {
      isValid: false,
      error: `Capacity must be at least ${MIN_CAPACITY} messages to maintain engagement quality`,
    };
  }

  if (capacity > MAX_CAPACITY) {
    return {
      isValid: false,
      error: `For sustainable engagement, we limit capacity to ${MAX_CAPACITY} messages/day`,
    };
  }

  return { isValid: true };
}

/**
 * Validates boundary message template (Story 6.5)
 * @param message - The boundary message to validate
 * @returns Validation result with error message if invalid
 * @example
 * ```typescript
 * const result = validateBoundaryMessage('Thanks for reaching out!...');
 * if (!result.isValid) {
 *   console.error(result.error);
 * }
 * ```
 */
export function validateBoundaryMessage(message: string): UsernameValidationResult {
  const trimmed = message.trim();

  if (trimmed.length === 0) {
    return {
      isValid: false,
      error: 'Boundary message is required',
    };
  }

  if (trimmed.length < MIN_BOUNDARY_MESSAGE_LENGTH) {
    return {
      isValid: false,
      error: `Boundary message must be at least ${MIN_BOUNDARY_MESSAGE_LENGTH} characters for clarity`,
    };
  }

  if (trimmed.length > MAX_BOUNDARY_MESSAGE_LENGTH) {
    return {
      isValid: false,
      error: `Boundary message must be ${MAX_BOUNDARY_MESSAGE_LENGTH} characters or less to avoid overwhelming fans`,
    };
  }

  return { isValid: true };
}

/**
 * Renders a boundary message template with variable substitution (Story 6.5)
 * @param template - The boundary message template with variables
 * @param vars - Variable values to substitute
 * @returns Rendered message with variables replaced
 * @example
 * ```typescript
 * const rendered = renderBoundaryTemplate(
 *   'Thanks! Check {{faqUrl}} for more.',
 *   { creatorName: 'Alice', faqUrl: 'https://example.com/faq' }
 * );
 * ```
 */
export function renderBoundaryTemplate(
  template: string,
  vars: {
    creatorName?: string;
    faqUrl?: string;
    communityUrl?: string;
  }
): string {
  let rendered = template;

  // Replace variables with values or placeholders
  rendered = rendered.replace(/\{\{creatorName\}\}/g, vars.creatorName || '[Your Name]');
  rendered = rendered.replace(/\{\{faqUrl\}\}/g, vars.faqUrl || '[FAQ not configured]');
  rendered = rendered.replace(
    /\{\{communityUrl\}\}/g,
    vars.communityUrl || '[Community not configured]'
  );

  return rendered;
}

// =============================================
// Epic 6: Engagement Health Dashboard (Story 6.6)
// =============================================

/**
 * Burnout risk level assessment
 * @remarks
 * Based on capacity usage, response patterns, and engagement quality
 */
export type BurnoutRisk = 'low' | 'medium' | 'high';

/**
 * Engagement metrics snapshot for a specific time period (Story 6.6)
 *
 * @remarks
 * Stored in Firestore at `/engagement_metrics/{metricId}`.
 * Calculated daily by scheduled Cloud Function.
 * Provides quality-focused metrics for creator health monitoring.
 *
 * @example
 * ```typescript
 * const metrics: EngagementMetrics = {
 *   id: 'daily-2025-10-26-user123',
 *   userId: 'user123',
 *   period: 'daily',
 *   startDate: Timestamp.fromDate(new Date('2025-10-26T00:00:00')),
 *   endDate: Timestamp.fromDate(new Date('2025-10-26T23:59:59')),
 *   metrics: {
 *     qualityScore: 87,
 *     personalResponseRate: 82,
 *     avgResponseTime: 18,
 *     conversationDepth: 45,
 *     capacityUsage: 70,
 *     burnoutRisk: 'low'
 *   },
 *   trends: {
 *     qualityScoreDiff: 5,
 *     personalResponseRateDiff: 2,
 *     avgResponseTimeDiff: -3,
 *     conversationDepthDiff: 5
 *   },
 *   createdAt: Timestamp.now()
 * };
 * ```
 */
export interface EngagementMetrics {
  /** Unique metrics identifier */
  id: string;

  /** User ID this metrics record belongs to */
  userId: string;

  /** Time period type for this metrics snapshot */
  period: 'daily' | 'weekly' | 'monthly';

  /** Start timestamp of the metrics period */
  startDate: Timestamp;

  /** End timestamp of the metrics period */
  endDate: Timestamp;

  /** Core engagement quality metrics */
  metrics: {
    /**
     * Overall health score (0-100)
     * @remarks
     * Weighted composite of all metrics:
     * - Personal response rate: 35%
     * - Average response time: 25%
     * - Conversation depth: 20%
     * - Capacity usage: 20%
     */
    qualityScore: number;

    /**
     * Personal response rate (0-100)
     * @remarks
     * Percentage of AI drafts that were edited before sending.
     * Higher values indicate more authentic, personalized engagement.
     */
    personalResponseRate: number;

    /**
     * Average response time in hours
     * @remarks
     * Time from fan message receipt to creator response.
     * Lower values indicate better responsiveness.
     */
    avgResponseTime: number;

    /**
     * Conversation depth (0-100)
     * @remarks
     * Percentage of conversations with 3+ message exchanges.
     * Higher values indicate deeper relationship building.
     */
    conversationDepth: number;

    /**
     * Capacity usage (0-100)
     * @remarks
     * Percentage of daily message limit used.
     * Optimal range: 60-90%
     */
    capacityUsage: number;

    /**
     * Burnout risk assessment
     * @remarks
     * Risk score based on:
     * - 7+ days at 100% capacity: high risk
     * - Low personal response rate (< 60%): medium risk
     * - Slow response times (> 48h): medium risk
     * - Low conversation depth (< 25%): low-medium risk
     */
    burnoutRisk: BurnoutRisk;
  };

  /**
   * Week-over-week trend comparisons (optional)
   * @remarks
   * Only present for weekly and daily metrics with historical data.
   * Shows delta from previous period.
   */
  trends?: {
    /** Change in quality score from previous period */
    qualityScoreDiff: number;

    /** Change in personal response rate from previous period */
    personalResponseRateDiff: number;

    /** Change in average response time from previous period (negative = improvement) */
    avgResponseTimeDiff: number;

    /** Change in conversation depth from previous period */
    conversationDepthDiff: number;
  };

  /** Timestamp when metrics were calculated */
  createdAt: Timestamp;
}

/**
 * Health score calculation components (Story 6.6)
 *
 * @remarks
 * Individual normalized scores (0-100) for each health metric.
 * Used internally for weighted composite calculation.
 */
export interface HealthScoreComponents {
  /** Personal response rate score (0-100) */
  personalResponseRate: number;

  /** Response time score (0-100, normalized) */
  avgResponseTime: number;

  /** Conversation depth score (0-100) */
  conversationDepth: number;

  /** Capacity usage score (0-100, normalized) */
  capacityUsage: number;
}

/**
 * Raw metrics data for health score calculation (Story 6.6)
 *
 * @remarks
 * Intermediate data structure used during metric aggregation.
 * Contains raw values before normalization and scoring.
 */
export interface RawEngagementMetrics {
  /** Raw personal response rate (0-100) */
  personalResponseRate: number;

  /** Raw average response time in hours */
  avgResponseTime: number;

  /** Raw conversation depth percentage (0-100) */
  conversationDepth: number;

  /** Raw capacity usage percentage (0-100) */
  capacityUsage: number;

  /** Number of consecutive days at maximum capacity */
  daysAtMax?: number;
}
